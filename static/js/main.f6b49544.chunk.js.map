{"version":3,"sources":["components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOPtions.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","onLeaveFeedback","type","name","onClick","Notification","message","App","useState","setGood","setNeutral","setBad","setTotal","positive","setPositive","useEffect","toFixed","event","target","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAiBeA,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,qCACI,6BAAKD,IACJC,MCgBEC,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC7C,OACI,qCACI,sCAASJ,KACT,yCAAYC,KACZ,qCAAQC,KACR,uCAAUC,KACnB,mDAAsBC,EAAtB,WCyBYC,EAhCS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACvB,OACI,qCACI,wBACIC,KAAK,SACLC,KAAK,OACLC,QAASH,EAHb,kBAOA,wBACIC,KAAK,SACLC,KAAK,UACLC,QAASH,EAHb,qBAOA,wBACIC,KAAK,SACLC,KAAK,MACLC,QAASH,EAHb,qBCPGI,EAVM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvB,OACC,mCACC,4BAAIA,OCCQ,SAASC,IAAO,IAAD,EACLC,mBAAS,GADJ,mBACtBb,EADsB,KAChBc,EADgB,OAECD,mBAAS,GAFV,mBAEtBZ,EAFsB,KAEbc,EAFa,OAGPF,mBAAS,GAHF,mBAGtBX,EAHsB,KAGjBc,EAHiB,OAIHH,mBAAS,GAJN,mBAItBV,EAJsB,KAIfc,EAJe,OAKGJ,mBAAS,IALZ,mBAKtBK,EALsB,KAKZC,EALY,KAiC7B,OARAC,qBAAU,WACTH,EAASjB,EAAOC,EAAUC,KACxB,CAACF,EAAMC,EAASC,IAEnBkB,qBAAU,WACTD,EAAY,GAAD,QAAMnB,EAAOG,EAAS,KAAKkB,QAAQ,OAC5C,CAACrB,EAAMG,IAGT,qCACC,cAAC,EAAD,CAASN,MAAM,wBAAf,SACC,cAAC,EAAD,CAAiBS,gBA7BA,SAAAgB,GAGjB,OAFiBA,EAAMC,OAAff,MAGN,IAAK,OACHM,GAAQ,SAAAU,GAAS,OAAIA,EAAY,KACjC,MACF,IAAK,UACHT,GAAW,SAAAS,GAAS,OAAIA,EAAY,KACpC,MACF,IAAK,MACHR,GAAO,SAAAQ,GAAS,OAAIA,EAAY,WAqB1B,IAAVrB,EACA,cAAC,EAAD,CAAcQ,QAAQ,sBAErB,cAAC,EAAD,CAASd,MAAM,aAAf,SACC,cAAC,EAAD,CACCG,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBc,S,MClD3BO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACf,EAAD,MAEFgB,SAASC,eAAe,W","file":"static/js/main.f6b49544.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </>\r\n    );\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n    return (\r\n        <>\r\n            <p>Good:{good}</p>\r\n            <p>Neutral:{neutral}</p>\r\n            <p>Bad:{bad}</p>\r\n            <p>Total:{total}</p>\r\n\t\t\t<p>Positive feedback:{positivePercentage}%</p>\r\n        </>\r\n    );\r\n};\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n\tpositivePercentage: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback }) => {\r\n    return (\r\n        <>\r\n            <button\r\n                type=\"button\"\r\n                name=\"good\"\r\n                onClick={onLeaveFeedback}\r\n            >\r\n                Good\r\n            </button>\r\n            <button\r\n                type=\"button\"\r\n                name=\"neutral\"\r\n                onClick={onLeaveFeedback}\r\n            >\r\n                Neutral\r\n            </button>\r\n            <button\r\n                type=\"button\"\r\n                name=\"bad\"\r\n                onClick={onLeaveFeedback}\r\n            >\r\n                Bad\r\n            </button>\r\n        </>\r\n    );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n\tonLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<p>{message}</p>\r\n\t\t</>\r\n\t);\r\n};\r\nNotification.propTypes = {\r\n\tmessage: PropTypes.string.isRequired\r\n};\r\nexport default Notification;","import { useEffect, useState } from 'react';\r\nimport Section from './components/Section/Section';\r\nimport Statistics from './components/Statistics/Statistics';\r\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOPtions';\r\nimport Notification from './components/Notification/Notification';\r\n\r\n\r\nexport default function App() {\r\n\tconst [good, setGood] = useState(0);\r\n\tconst [neutral, setNeutral] = useState(0);\r\n\tconst [bad, setBad] = useState(0);\r\n\tconst [total, setTotal] = useState(0);\r\n\tconst [positive, setPositive] = useState('');\r\n\r\n\tconst handleClick = event => {\r\n    const { name } = event.target;\r\n\r\n    switch (name) {\r\n      case 'good':\r\n        setGood(prevState => prevState + 1);\r\n        break;\r\n      case 'neutral':\r\n        setNeutral(prevState => prevState + 1);\r\n        break;\r\n      case 'bad':\r\n        setBad(prevState => prevState + 1);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\t};\r\n\t\r\n\tuseEffect(() => {\r\n\t\tsetTotal(good + neutral + bad);\r\n\t}, [good, neutral, bad]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetPositive(`${((good / total) * 100).toFixed(2)}`);\r\n\t}, [good, total]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Section title=\"Please leave feedback\">\r\n\t\t\t\t<FeedbackOptions onLeaveFeedback={handleClick} />\r\n\t\t\t</Section>\r\n\r\n\t\t\t{total === 0 ? (\r\n\t\t\t\t<Notification message=\"No feedback given\" />\r\n\t\t\t) : (\r\n\t\t\t\t\t<Section title=\"Statistics\">\r\n\t\t\t\t\t\t<Statistics\r\n\t\t\t\t\t\t\tgood={good}\r\n\t\t\t\t\t\t\tneutral={neutral}\r\n\t\t\t\t\t\t\tbad={bad}\r\n\t\t\t\t\t\t\ttotal={total}\r\n\t\t\t\t\t\t\tpositivePercentage={positive}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Section>\r\n\t\t\t\t)}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\n// export default class App extends Component {\r\n// \tstate = {\r\n// \t\tgood: 0,\r\n// \t\tneutral: 0,\r\n// \t\tbad: 0\r\n// \t};\r\n\r\n// \tcountTotalFeedback = () => {\r\n// \t\tconst { good, neutral, bad } = this.state;\r\n// \t\tconst result = good + neutral + bad;\r\n// \t\treturn result;\r\n// \t};\r\n\r\n// \tcountPositiveFeedbackPercentage = () => {\r\n// \t\tconst result = this.countTotalFeedback();\r\n// \t\tconst { good } = this.state;\r\n// \t\tconst percentage = (good * 100) / result;\r\n// \t\treturn Math.round(percentage);\r\n// \t};\r\n\r\n// \tonLeaveFeedback = (e) => {\r\n// \t\tconst name = e.target.name;\r\n// \t\tthis.setState((prevState) => ({\r\n// \t\t\t[name]: prevState[name] + 1\r\n// \t\t}));\r\n// \t};\r\n// \trender() {\r\n// \t\tconst { good, neutral, bad } = this.state;\r\n// \t\tconst total = this.countTotalFeedback();\r\n// \t\tconst positivePercentage = this.countPositiveFeedbackPercentage();\r\n\r\n// \t\tconst objKey = Object.keys(this.state);\r\n// \t\treturn (\r\n\t\t\t// <>\r\n\t\t\t// \t<Section title=\"Please leave feedback\">\r\n\t\t\t// \t\t<FeedbackOptions options={objKey} onLeaveFeedback={this.onLeaveFeedback} />\r\n\t\t\t// \t</Section>\r\n\r\n\t\t\t// \t{total === 0 ? (\r\n\t\t\t// \t\t<Notification message=\"No feedback given\" />\r\n\t\t\t// \t) : (\r\n\t\t\t// \t\t<Section title=\"Statistics\">\r\n\t\t\t// \t\t\t<Statistics\r\n\t\t\t// \t\t\t\tgood={good}\r\n\t\t\t// \t\t\t\tneutral={neutral}\r\n\t\t\t// \t\t\t\tbad={bad}\r\n\t\t\t// \t\t\t\ttotal={total}\r\n\t\t\t// \t\t\t\tpositivePercentage={positivePercentage}\r\n\t\t\t// \t\t\t/>\r\n\t\t\t// \t\t</Section>\r\n\t\t\t// \t)}\r\n\t\t\t// </>\r\n// \t\t);\r\n// \t}\r\n// }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);"],"sourceRoot":""}